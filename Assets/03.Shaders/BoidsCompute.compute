
#pragma kernel ForceCS
#pragma kernel IntegrateCS

struct BoidData
{
    float3 velocity;
    float3 position;
};

#define SIMULATION_BLOCK_SIZE 256

StructuredBuffer<BoidData> BoidDataBufferRead;
RWStructuredBuffer<BoidData> BoidDataBufferWrite;

StructuredBuffer<float3> BoidForceBufferRead;
RWStructuredBuffer<float3> BoidForceBufferWrite;

int MaxBoidObjectNum;

float DeltaTime;

float SeparateNeighborhoodRadius;
float AlignmentNeighborhoodRadius;
float CohesionNeighborhoodRadius;

float MaxSpeed;
float MaxSteerForce;

float SeparateWeight;
float AlignmentWeight;
float CohesionWeight;

float4 WallCenter;
float4 WallSize;
float AvoidWallWeight;


float3 limit(float3 vec, float max)
{
    float length = sqrt(dot(vec, vec));
    return (length > max && length > 0) ? vec.xyz * (max / length) : vec.xyz;
}

float3 avoidWall(float3 position)
{
    float3 wc = WallCenter.xyz;
    float3 ws = WallSize.xyz;
    float3 acc = float3(0.0f,0.0f, 0.0f);

	acc.x = (position.x < wc.x - ws.x * 0.5) ? acc.x + 1.0 : acc.x;
	acc.x = (position.x > wc.x + ws.x * 0.5) ? acc.x - 1.0 : acc.x;

	acc.y = (position.y < wc.y - ws.y * 0.5) ? acc.y + 1.0 : acc.y;
	acc.y = (position.y > wc.y + ws.y * 0.5) ? acc.y - 1.0 : acc.y;

	acc.z = (position.z < wc.z - ws.z * 0.5) ? acc.z + 1.0 : acc.z;
	acc.z = (position.z > wc.z + ws.z * 0.5) ? acc.z - 1.0 : acc.z;

	return acc;
}

groupshared BoidData BoidDatas[SIMULATION_BLOCK_SIZE];

[numthreads(SIMULATION_BLOCK_SIZE,1,1)]
void ForceCS(
    uint3 DispatchThreadID : SV_DispatchThreadID,
    uint3 GroupID : SV_GroupID,
    uint3 GroupThreadID : SV_GroupThreadID,
    uint GroupIndex : SV_GroupIndex)
{
    const unsigned int P_ID = DispatchThreadID.x;
    float3 prevPosition = BoidDataBufferRead[P_ID].position;
    float3 prevVelocity = BoidDataBufferRead[P_ID].velocity;

    float3 force = float3(0, 0, 0);

    float3 sepPosSum = float3(0, 0, 0);
    int sepCount = 0;

	float3 aliVelSum = float3(0, 0, 0); 
	int aliCount = 0;

	float3 cohPosSum = float3(0, 0, 0);
	int cohCount = 0;
	
	[loop]
	for (int i = 0; i < MaxBoidObjectNum; i += SIMULATION_BLOCK_SIZE)
	{
		BoidDatas[GroupIndex] = BoidDataBufferRead[i + GroupIndex];
		
		GroupMemoryBarrierWithGroupSync();

		for (int j = 0; j < SIMULATION_BLOCK_SIZE; ++j)
		{
			float3 position = BoidDatas[j].position;
			float3 velocity = BoidDatas[j].velocity;

			float3 diff = prevPosition - position;
			float dist = sqrt(dot(diff, diff));

			if (dist > .0f && dist <= SeparateNeighborhoodRadius)
			{
				float3 repulse = normalize(prevPosition - position);
				repulse /= dist;
				sepPosSum += repulse;
				++sepCount;
			}

			if (dist > .0f && dist <= AlignmentNeighborhoodRadius)
			{
				aliVelSum += velocity;
				++aliCount;
			}

			if (dist > .0f && dist <= CohesionNeighborhoodRadius)
			{
				cohPosSum += position;
				++cohCount;
			}
		}
		GroupMemoryBarrierWithGroupSync();
	}
	
	float3 sepSteer = (float3)0.0f;
	if (sepCount > 0)
	{
		sepSteer = sepPosSum / (float)sepCount;
		sepSteer = normalize(sepSteer) * MaxSpeed;
		sepSteer = sepSteer - prevVelocity;
		sepSteer = limit(sepSteer, MaxSteerForce);
	}

	float3 aliSteer = (float3)0.0f;
	if (aliCount > 0)
	{
		aliSteer = aliVelSum / (float)aliCount;
		aliSteer = normalize(aliSteer) * MaxSpeed;
		aliSteer = aliSteer - prevVelocity;
		aliSteer = limit(aliSteer, MaxSteerForce);
	}

	float3 cohSteer = (float3)0.0f;
	if (cohCount > 0)
	{
		cohPosSum = cohPosSum / (float)cohCount;
		cohSteer = cohPosSum - prevPosition;
		cohSteer = normalize(cohSteer) * MaxSpeed;
		cohSteer = cohSteer - prevVelocity;
		cohSteer = limit(cohSteer, MaxSteerForce);
	}

	force += aliSteer * AlignmentWeight;
	force += cohSteer * CohesionWeight;
	force += sepSteer * SeparateWeight;

	BoidForceBufferWrite[P_ID] = force;
}

[numthreads(SIMULATION_BLOCK_SIZE,1,1)]
void IntegrateCS(uint3 DispatchThreadID : SV_DispatchThreadID)
{
	const int P_ID = DispatchThreadID.x;

	BoidData b = BoidDataBufferWrite[P_ID];
	float3 force = BoidForceBufferRead[P_ID];

	force += avoidWall(b.position) * AvoidWallWeight;

	b.velocity += force * DeltaTime;
	b.velocity = limit(b.velocity, MaxSpeed);
	b.position += b.velocity * DeltaTime;


	BoidDataBufferWrite[P_ID] = b;
}